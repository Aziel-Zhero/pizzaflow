// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // engineType = "library" // Recommended for Node.js environments when using Accelerate
  // For Firebase/Next.js on Node.js runtime, 'library' is often preferred.
  // If deploying to Edge Functions, 'dataproxy' (which Accelerate uses) or 'binary' might be relevant.
  // For `prisma migrate dev`, a binary engine is typically used locally.
  // The `--no-engine` flag for `prisma generate` is specific to Accelerate/Data Proxy client generation.
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // Used by Prisma Client (points to Accelerate)
  directUrl = env("DIRECT_URL") // Used by Prisma Migrate (points directly to the DB)
}

model MenuItem {
  id          String    @id @default(cuid())
  name        String
  price       Decimal   @db.Decimal(10, 2)
  category    String
  description String?
  imageUrl    String?
  isPromotion Boolean   @default(false)
  dataAiHint  String?   @map("data_ai_hint")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  orderItems  OrderItem[]

  @@map("menu_items")
}

model Order {
  id                      String       @id @default(cuid())
  customerName            String       @map("customer_name")
  customerAddress         String       @map("customer_address")
  customerCep             String?      @map("customer_cep")
  customerReferencePoint  String?      @map("customer_reference_point")
  items                   OrderItem[]
  totalAmount             Decimal      @db.Decimal(10, 2) @map("total_amount")
  status                  OrderStatus  @default(Pendente)
  createdAt               DateTime     @default(now()) @map("created_at")
  updatedAt               DateTime?    @updatedAt @map("updated_at")
  deliveredAt             DateTime?    @map("delivered_at")
  estimatedDeliveryTime   String?      @map("estimated_delivery_time")
  deliveryPerson          String?      @map("delivery_person")
  paymentType             PaymentType? @map("payment_type")
  paymentStatus           PaymentStatus @default(Pendente) @map("payment_status")
  notes                   String?
  optimizedRoute          String?      @map("optimized_route")
  nfeLink                 String?      @map("nfe_link")

  appliedCouponCode     String?   @map("applied_coupon_code")
  appliedCouponDiscount Decimal?  @db.Decimal(10, 2) @map("applied_coupon_discount")
  couponId              String?   @map("coupon_id")
  coupon                Coupon?   @relation(fields: [couponId], references: [id])

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String   @map("order_id")
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String   @map("menu_item_id")
  name       String // Name of the item at the time of order
  quantity   Int
  price      Decimal  @db.Decimal(10, 2) // Price of the item at the time of order
  itemNotes  String?  @map("item_notes")

  @@map("order_items")
}

model Coupon {
  id              String        @id @default(cuid())
  code            String        @unique
  description     String?
  discountType    DiscountType  @map("discount_type")
  discountValue   Decimal       @db.Decimal(10, 2) @map("discount_value")
  isActive        Boolean       @default(true) @map("is_active")
  expiresAt       DateTime?     @map("expires_at")
  usageLimit      Int?          @map("usage_limit")
  timesUsed       Int           @default(0) @map("times_used")
  minOrderAmount  Decimal?      @db.Decimal(10, 2) @map("min_order_amount")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  orders          Order[]

  @@map("coupons")
}

enum OrderStatus {
  Pendente
  EmPreparo
  AguardandoRetirada
  SaiuParaEntrega
  Entregue
  Cancelado
}

enum PaymentType {
  Dinheiro
  Cartao
  Online // Represents PIX or other online methods
}

enum PaymentStatus {
  Pendente
  Pago
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
