
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MenuItem {
  id            String    @id @default(cuid())
  name          String
  price         Decimal   @db.Decimal(10, 2)
  category      String
  description   String?
  imageUrl      String?
  dataAiHint    String?
  isPromotion   Boolean   @default(false)
  orderItems    OrderItem[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Order {
  id                      String      @id @default(cuid())
  customerName            String
  customerAddress         String
  customerCep             String?
  customerReferencePoint  String?
  items                   OrderItem[]
  totalAmount             Decimal     @db.Decimal(10, 2)
  status                  OrderStatus @default(Pendente)
  createdAt               DateTime    @default(now())
  updatedAt               DateTime?   @updatedAt
  deliveredAt             DateTime?
  estimatedDeliveryTime   DateTime?
  deliveryPerson          String?
  paymentType             PaymentType?
  paymentStatus           PaymentStatus @default(Pendente)
  notes                   String?
  optimizedRoute          String?

  appliedCouponCode       String?
  appliedCouponDiscount   Decimal?    @db.Decimal(10, 2)
  couponId                String?
  coupon                  Coupon?     @relation(fields: [couponId], references: [id])

  @@index([createdAt])
}

model OrderItem {
  id          String    @id @default(cuid())
  quantity    Int
  price       Decimal   @db.Decimal(10, 2) // Price at the time of order
  itemNotes   String?

  orderId     String
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  menuItemId  String
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [id])
  name        String    // Denormalized name from MenuItem for history

  @@index([orderId])
  @@index([menuItemId])
}

model Coupon {
  id                  String    @id @default(cuid())
  code                String    @unique
  description         String?
  discountType        DiscountType @default(PERCENTAGE)
  discountValue       Decimal   @db.Decimal(10, 2)
  isActive            Boolean   @default(true)
  expiresAt           DateTime?
  usageLimit          Int?      // Max number of times this coupon can be used overall
  timesUsed           Int       @default(0)
  minOrderAmount      Decimal?  @db.Decimal(10, 2) // Minimum order amount for coupon to be valid
  
  orders              Order[]   // Orders that used this coupon

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([code])
  @@index([isActive, expiresAt])
}

enum OrderStatus {
  Pendente
  EmPreparo
  AguardandoRetirada
  SaiuParaEntrega
  Entregue
  Cancelado
}

enum PaymentType {
  Dinheiro
  Cartao
  Online // PIX
}

enum PaymentStatus {
  Pendente
  Pago
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
