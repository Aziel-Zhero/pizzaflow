
generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["prismaSchemaFolder"] // Removido se não explicitamente necessário pelo Accelerate ou se causar problemas.
  // binaryTargets   = ["native", "rhel-openssl-1.0.x"] // Removido para usar --no-engine com generate se for o caso do Accelerate
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Descomente e defina DIRECT_URL no .env se 'prisma migrate dev' falhar com a URL do Accelerate.
}

model MenuItem {
  id          String      @id @default(cuid())
  name        String
  price       Decimal     @db.Decimal(10, 2)
  category    String
  description String?
  imageUrl    String?
  isPromotion Boolean?    @default(false)
  dataAiHint  String?     // Para ajudar na busca de imagens em placeholders
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id                      String        @id @default(cuid())
  customerName            String
  customerAddress         String
  customerCep             String?
  customerReferencePoint  String?
  totalAmount             Decimal       @db.Decimal(10, 2)
  status                  OrderStatus   @default(Pendente)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime?     @updatedAt
  deliveredAt             DateTime?
  estimatedDeliveryTime   String?
  deliveryPerson          String?
  paymentType             PaymentType?
  paymentStatus           PaymentStatus @default(Pendente)
  notes                   String?
  optimizedRoute          String?
  nfeLink                 String?       // Novo campo para link da NFe

  // Relação com Cupom
  appliedCouponCode     String?
  appliedCouponDiscount Decimal?      @db.Decimal(10, 2)
  couponId              String?
  coupon                Coupon?       @relation(fields: [couponId], references: [id])

  items                   OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  name       String   // Nome do item no momento do pedido (denormalizado)
  quantity   Int
  price      Decimal  @db.Decimal(10, 2) // Preço do item no momento do pedido (denormalizado)
  itemNotes  String?

  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Restrict) // Evita deleção de MenuItem se estiver em um pedido
  
  @@index([orderId])
  @@index([menuItemId])
}

model Coupon {
  id              String         @id @default(cuid())
  code            String         @unique
  description     String?
  discountType    DiscountType   // PERCENTAGE ou FIXED_AMOUNT
  discountValue   Decimal        @db.Decimal(10, 2)
  isActive        Boolean        @default(true)
  expiresAt       DateTime?
  usageLimit      Int?           // Limite total de usos do cupom
  timesUsed       Int            @default(0)
  minOrderAmount  Decimal?       @db.Decimal(10, 2) // Valor mínimo do pedido para o cupom ser aplicável
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  orders          Order[]
}

enum OrderStatus {
  Pendente
  EmPreparo
  AguardandoRetirada
  SaiuParaEntrega
  Entregue
  Cancelado
}

enum PaymentType {
  Dinheiro
  Cartao
  Online // Pode ser PIX, etc.
}

enum PaymentStatus {
  Pendente
  Pago
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
