
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // For Prisma Migrate
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"] // For Prisma Accelerate
}

model MenuItem {
  id          String  @id @default(cuid())
  name        String
  price       Decimal @db.Decimal(10, 2)
  category    String
  description String?
  imageUrl    String?
  isPromotion Boolean @default(false)
  dataAiHint  String? // For placeholder image generation hints

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                      String        @id @default(cuid())
  customerName            String
  customerAddress         String
  customerCep             String?
  customerReferencePoint  String?
  items                   OrderItem[]
  totalAmount             Decimal       @db.Decimal(10, 2)
  status                  OrderStatus   @default(Pendente)
  paymentType             PaymentType?
  paymentStatus           PaymentStatus @default(Pendente)
  notes                   String?
  optimizedRoute          String?
  deliveryPerson          String?
  nfeLink                 String? // Novo campo para link da NFe

  appliedCouponCode     String?
  appliedCouponDiscount Decimal? @db.Decimal(10, 2)
  couponId              String?
  coupon                Coupon?  @relation(fields: [couponId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deliveredAt DateTime?
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id]) // Relação com MenuItem
  name       String   // Denormalized name from MenuItem at time of order
  quantity   Int
  price      Decimal  @db.Decimal(10, 2) // Price per item at time of order
  itemNotes  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id             String       @id @default(cuid())
  code           String       @unique
  description    String?
  discountType   DiscountType
  discountValue  Decimal      @db.Decimal(10, 2)
  isActive       Boolean      @default(true)
  expiresAt      DateTime?
  usageLimit     Int?
  timesUsed      Int          @default(0)
  minOrderAmount Decimal?     @db.Decimal(10, 2)

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  Pendente
  EmPreparo
  AguardandoRetirada
  SaiuParaEntrega
  Entregue
  Cancelado
}

enum PaymentType {
  Dinheiro
  Cartao
  Online // PIX
}

enum PaymentStatus {
  Pendente
  Pago
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
