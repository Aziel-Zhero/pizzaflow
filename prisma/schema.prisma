// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"] // Necessário para Accelerate
  // engineType = "library" // Comentado, pois --no-engine no generate é usado com Accelerate
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Para queries da aplicação via Accelerate
  // directUrl = env("DIRECT_URL") // Para `prisma migrate dev` - IMPORTANTE: Certifique-se que DIRECT_URL no .env é para o NOVO banco.
                                // Se você não tiver a DIRECT_URL para o novo banco, `prisma migrate dev` não funcionará.
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  price       Decimal  @db.Decimal(10, 2)
  category    String
  description String?
  imageUrl    String?
  isPromotion Boolean? @default(false)
  dataAiHint  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]
}

model Order {
  id                      String        @id @default(cuid())
  customerName            String
  customerAddress         String
  customerCep             String?
  customerReferencePoint  String?
  items                   OrderItem[]
  totalAmount             Decimal       @db.Decimal(10, 2)
  status                  OrderStatus   @default(Pendente)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime?     @updatedAt
  deliveredAt             DateTime?
  estimatedDeliveryTime   String?
  deliveryPerson          String?
  paymentType             PaymentType?
  paymentStatus           PaymentStatus @default(Pendente)
  notes                   String?
  optimizedRoute          String?
  nfeLink                 String?       // Link para a NFe

  // Campos do Cupom
  appliedCouponCode     String?
  appliedCouponDiscount Decimal?   @db.Decimal(10, 2)
  couponId              String?
  coupon                Coupon?    @relation(fields: [couponId], references: [id])


  @@index([createdAt])
  @@index([status])
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  name       String // Denormalized name from MenuItem at time of order
  quantity   Int
  price      Decimal  @db.Decimal(10, 2) // Denormalized price from MenuItem at time of order
  itemNotes  String?

  @@index([orderId])
  @@index([menuItemId])
}

model Coupon {
  id              String       @id @default(cuid())
  code            String       @unique
  description     String?
  discountType    DiscountType // PERCENTAGE ou FIXED_AMOUNT
  discountValue   Decimal      @db.Decimal(10, 2)
  isActive        Boolean      @default(true)
  expiresAt       DateTime?
  usageLimit      Int?         // Limite máximo de usos
  timesUsed       Int          @default(0) // Quantas vezes foi usado
  minOrderAmount  Decimal?     @db.Decimal(10, 2) // Valor mínimo do pedido para aplicar
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  orders          Order[]      // Pedidos que usaram este cupom
}

enum OrderStatus {
  Pendente
  EmPreparo
  AguardandoRetirada
  SaiuParaEntrega
  Entregue
  Cancelado
}

enum PaymentType {
  Dinheiro
  Cartao
  Online // PIX, etc.
}

enum PaymentStatus {
  Pendente
  Pago
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
